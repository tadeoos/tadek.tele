<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Kubona - projects</title><link>http://tadek.tele.com.pl/</link><description></description><lastBuildDate>Tue, 11 Jul 2017 10:20:00 +0200</lastBuildDate><item><title>Introducing: epygone</title><link>http://tadek.tele.com.pl/epygone-pt1.html</link><description>&lt;!-- Status: draft --&gt;

&lt;p&gt;Around a year ago I got creative with one of homework assignments from a Linguistic Engineeirng course I was taking and developed a simple text generator who recently became the Epygone, which you can now play with yourself &lt;a href="/epygone"&gt;here&lt;/a&gt;. I plan on doing two part series on this project. First one, which you are currently reading, is more general and describes the way in which Epygone imitates different books. The second one (currently in writing) is going to be more technical and dive a bit into NLTK, Flask and probably some deployment stuff like Docker and Ansible. &lt;/p&gt;
&lt;h4&gt;How does it work?&lt;/h4&gt;
&lt;p&gt;Lets start with a bulletpoint overview and discuss the details later.
&lt;!-- I consider Epygone to be a very naive epigone. Here's why: --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Epygone starts by consuming a &lt;code&gt;.txt&lt;/code&gt; file, (ideally less than 500 kilobytes in size). &lt;/li&gt;
&lt;li&gt;He then generates a conditional frequency distribution based on text's trigrams. What it means is that he can now obtain an information that after …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tadek Teleżyński</dc:creator><pubDate>Tue, 11 Jul 2017 10:20:00 +0200</pubDate><guid isPermaLink="false">tag:tadek.tele.com.pl,2017-07-11:/epygone-pt1.html</guid><category>python</category><category>nltk</category><category>web</category></item></channel></rss>