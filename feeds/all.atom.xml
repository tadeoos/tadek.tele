<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Kubona</title><link href="http://tadek.tele.com.pl/" rel="alternate"></link><link href="http://tadek.tele.com.pl/feeds/all.atom.xml" rel="self"></link><id>http://tadek.tele.com.pl/</id><updated>2017-02-20T10:20:00+01:00</updated><entry><title>HOWTO listen to a Discover Weekly playlist? (the lazy way)</title><link href="http://tadek.tele.com.pl/howto-sdw.html" rel="alternate"></link><published>2017-02-20T10:20:00+01:00</published><updated>2017-02-20T10:20:00+01:00</updated><author><name>Tadek Teleżyński</name></author><id>tag:tadek.tele.com.pl,2017-02-20:/howto-sdw.html</id><summary type="html">&lt;p&gt;I listen to music a lot and have no problem with obsessing over one song that catches my ear for days. Nonetheless it's good to have some "movement in the business" as we Poles like to say, and since I've never managed to develop any structured or habitual way to go about this, I am a big fan of &lt;a href="https://www.spotify.com/"&gt;Spotify's&lt;/a&gt; Discover Weekly playlist.&lt;/p&gt;
&lt;p&gt;If you don't know what I'm talking about, two remarks are in order.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Congratulations on your information diet.&lt;/li&gt;
&lt;li&gt;It's a recommendation service that every Monday morning puts up a playlist consisting of 30 "songs that you may like".&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While we're on the subject — it &lt;a href="https://thenextweb.com/apps/2016/10/25/spotify-discover-boring/"&gt;seems&lt;/a&gt; &lt;a href="http://www.vogue.com/article/spotify-discover-weekly-genius"&gt;to work&lt;/a&gt; &lt;a href="http://www.adweek.com/digital/even-spotify-surprised-huge-success-its-discover-weekly-playlists-173129/"&gt;surprisingly&lt;/a&gt; &lt;a href="https://www.reddit.com/r/spotify/comments/5o1531/i_love_discover_weekly/"&gt;well&lt;/a&gt;&lt;sup id="sf-howto-sdw-1-back"&gt;&lt;a title="I'd guess that on average I find around two new &amp;quot;songs that I like&amp;quot; every week. Two out of thirty doesn't sound good, but it is a lot in the machine learning business." class="simple-footnote" href="#sf-howto-sdw-1"&gt;1&lt;/a&gt;&lt;/sup&gt; and if you want to know more about the magic behind it, you can check out &lt;a href="https://qz.com/571007/the-magic-that-makes-spotifys-discover-weekly-playlists-so-damn-good/"&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But let's go back to our story. &lt;/p&gt;
&lt;p&gt;So, one October Monday evening I was sitting in a bus, coming …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I listen to music a lot and have no problem with obsessing over one song that catches my ear for days. Nonetheless it's good to have some "movement in the business" as we Poles like to say, and since I've never managed to develop any structured or habitual way to go about this, I am a big fan of &lt;a href="https://www.spotify.com/"&gt;Spotify's&lt;/a&gt; Discover Weekly playlist.&lt;/p&gt;
&lt;p&gt;If you don't know what I'm talking about, two remarks are in order.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Congratulations on your information diet.&lt;/li&gt;
&lt;li&gt;It's a recommendation service that every Monday morning puts up a playlist consisting of 30 "songs that you may like".&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While we're on the subject — it &lt;a href="https://thenextweb.com/apps/2016/10/25/spotify-discover-boring/"&gt;seems&lt;/a&gt; &lt;a href="http://www.vogue.com/article/spotify-discover-weekly-genius"&gt;to work&lt;/a&gt; &lt;a href="http://www.adweek.com/digital/even-spotify-surprised-huge-success-its-discover-weekly-playlists-173129/"&gt;surprisingly&lt;/a&gt; &lt;a href="https://www.reddit.com/r/spotify/comments/5o1531/i_love_discover_weekly/"&gt;well&lt;/a&gt;&lt;sup id="sf-howto-sdw-1-back"&gt;&lt;a title="I'd guess that on average I find around two new &amp;quot;songs that I like&amp;quot; every week. Two out of thirty doesn't sound good, but it is a lot in the machine learning business." class="simple-footnote" href="#sf-howto-sdw-1"&gt;1&lt;/a&gt;&lt;/sup&gt; and if you want to know more about the magic behind it, you can check out &lt;a href="https://qz.com/571007/the-magic-that-makes-spotifys-discover-weekly-playlists-so-damn-good/"&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But let's go back to our story. &lt;/p&gt;
&lt;p&gt;So, one October Monday evening I was sitting in a bus, coming home from Uni, listening to the aforementioned playlist when suddenly a thought comes to my head:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Am I doing this wrong?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;THE LAZY WAY&lt;/h4&gt;
&lt;p&gt;What was I doing and what could be wrong about it?&lt;/p&gt;
&lt;p&gt;Well, if the goal of the Discover Weekly playlist is to find as many great new songs as possible then you definitely have to listen to all of them. Otherwise you leave room for this creepy neurotic guy&lt;sup id="sf-howto-sdw-2-back"&gt;&lt;a title="Or gal, of course.  Subconsciousness comes in many flavors." class="simple-footnote" href="#sf-howto-sdw-2"&gt;2&lt;/a&gt;&lt;/sup&gt; in your head who goes like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ooh... I bet there was a &lt;em&gt;really&lt;/em&gt; great song that you missed and now you'll never know about it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And that's just bad emotional hygiene. So if you want to make sure you'll check out every song, the best way to go about it is to just listen to your Discover Weekly, from top to bottom, without switching between playlists, songs etc. Or, If you do want to switch playlists, or happen to sometimes switch off your phone/computer/tablet what you should be doing is either remembering or writing down somewhere the name of the song you stopped at, so you can restart listening at the right place (notice that in this case shuffling won't come in handy).&lt;/p&gt;
&lt;p&gt;The above description has nothing in common with the way I use Spotify. I switch between playlists a lot, if a song pops into to my head I search for it, I always use shuffle. Basically, I like to keep a little chaos going on. The vision of writing down songs I finished listening at or cluttering my brain's RAM with the appropriate title is very unconvincing. &lt;/p&gt;
&lt;p&gt;This is the lazy way ladies and gentlemen — our main objective is to not change our listening habits!&lt;/p&gt;
&lt;p&gt;But how stupid or wise is it not to change them? In other words: &lt;strong&gt;what is the probability of listening to every song on the Discover Weekly when you restart it on shuffle a lot during the week each time listening to only a couple of songs?&lt;/strong&gt;
&lt;!-- Ok, so now we know what I was doing, but... --&gt;&lt;/p&gt;
&lt;h4&gt;THE PROBLEM&lt;/h4&gt;
&lt;!---...and what could be wrong about it?--&gt;

&lt;p&gt;Ok, so we know what we want to know but that's only the first step. And I'm still on the bus. But now it's a little bit later and I am trying to formulate this problem in somewhat more precise mathematical terms.&lt;/p&gt;
&lt;p&gt;As always in this business we have to start with some assumptions. Let's say you listen to the Discover Weekly twice a day during the commute, which takes around half an hour. Estimating that a song is on average 5 minutes long, this gives us 6 songs per shuffled playlist (we can think of it as a "window" of listening). And, what the heck, let's say that you do this commute not only Monday to Friday but every day, so we will have 14 shuffles in one week.&lt;/p&gt;
&lt;p&gt;At first glance we are dealing with three variables here. The size of our playlist (lets call it &lt;span class="math"&gt;\(n\)&lt;/span&gt;), the number of times we are replaying the playlist, hence making a shuffle (let's call it &lt;span class="math"&gt;\(x\)&lt;/span&gt;) and the number of songs that constitutes "the head" of a shuffled playlist which we will listen to in each "window" (let's call it &lt;span class="math"&gt;\(y\)&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Alrightyroo. So it seems that what we are looking for is a formula for a function &lt;span class="math"&gt;\(f\)&lt;/span&gt; that takes three arguments &lt;span class="math"&gt;\(n,x,y\)&lt;/span&gt; and spits out the probability of getting all elements of &lt;span class="math"&gt;\(n\)&lt;/span&gt;, considering that we make &lt;span class="math"&gt;\(x\)&lt;/span&gt; random samples of &lt;span class="math"&gt;\(n\)&lt;/span&gt;, and from each sample we take only first &lt;span class="math"&gt;\(y\)&lt;/span&gt; elements.&lt;/p&gt;
&lt;p&gt;You'll be able to adjust the above estimations to your liking once we have a formula. But what is important to notice is that the weakest assumption we're making here (due to simplicity) is that all the windows have the same length. That doesn't sound very probable, since you may easily listen to three songs on one sitting and to thirteen on another. But even though our model is a bit simplified it would still be quite cool to know your chances, wouldn't it?&lt;/p&gt;
&lt;p&gt;At this point in the story I'm entering my apartment and the best procrastination time in October is about to begin (yeah, I had other things to do).&lt;/p&gt;
&lt;h6&gt;&lt;strong&gt;A QUICK FLASHBACK FROM HIGH SCHOOL MATH...&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&lt;em&gt;If the meaning of "factorial" and "binomial coefficent" is well known to you, you can fearlessly skip this part. If not — the flashback is for you; it will come in handy later.&lt;/em&gt;&lt;/p&gt;
&lt;!--- zmienić przykłady na pójście do kina a potem na to, że jest mniej miejsc koło siebie — omijamy w ten sposób problem z kołowością --&gt;

&lt;p&gt;A typical problem in your high school probability class could go something like:&lt;/p&gt;
&lt;!--- &gt; Your five best friends are coming over for a little party. While you were bringing down some extra chairs you started to wonder in how many ways could you sit them down around the table. Help yourself by finding the answer. --&gt;

&lt;blockquote&gt;
&lt;p&gt;You and your four friends are going to the movies. While you were standing in line for the tickets you started to wonder in how many ways could you occupy the chairs in the movie theater. Help yourself by finding the answer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My favourite way of explaining this problem goes like this:&lt;/p&gt;
&lt;p&gt;We have five chairs: _ _ _ _ _. Each time we create a particular sitting we connect a person to a particular chair.&lt;/p&gt;
&lt;p&gt;The key here is to look at the situation slowly and from the perspective of the chairs. We have a chair #1. No one is seated yet. How many options do we have to pick someone to sit in this chair? It can be any of the friends, so we have 5 options. Now, our situation looks like this: 5 _ _ _ _. Moving on to the chair #2. How many options do we have now? Well, we have four friends left, so now we can choose in 4 different ways a person for the second spot — 5 4 _ _ _. Continuing in this spirit we get the following: 5 4 3 2 1. What do we do with those numbers? We multiply them! Why not adding them? Well, because &lt;em&gt;for every&lt;/em&gt; guest you seated on the first chair you have 4 choices on the second chair and &lt;em&gt;for every&lt;/em&gt; two guests you have chosen you got 3 options on the third chair and so on.&lt;/p&gt;
&lt;p&gt;The operation of multiplying a natural number &lt;span class="math"&gt;\(n\)&lt;/span&gt; by every natural number smaller then &lt;span class="math"&gt;\(n\)&lt;/span&gt; down to 1 is called &lt;a href="https://en.wikipedia.org/wiki/Factorial"&gt;&lt;em&gt;factorial&lt;/em&gt;&lt;/a&gt; and is denoted by the well known symbol of exclamation mark. Hence our answer is &lt;span class="math"&gt;\(5*4*3*2*1=5!=120\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now consider a follow-up question:&lt;/p&gt;
&lt;!--- &gt; Unfortunately your sister lent some of the chairs to the neighbours eariler this day and now you realize that you have only four chairs! One is obviously for you, so two of your friends will have to sit (or rather stand) somewhere else and only three can be sitted around the table with you. In how many ways can you pick the guests who will be enjoying a meal in a siiting position? --&gt;

&lt;blockquote&gt;
&lt;p&gt;Unfortunately the movie you picked is very popular and there are no five seats in any row left. You have to split up picking three seats in the last row and two seats in the second. How many options do you have for deciding who will be a part of the last row group?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In answering this one, we can start from what we've already learned. We have three chairs and five people to choose from so maybe the answer is &lt;span class="math"&gt;\(5*4*3=60\)&lt;/span&gt;? Well... Not exactly. The problem we are trying to solve here is this: &lt;em&gt;in how many ways can we choose three out of five people?&lt;/em&gt; Notice that the order of the people we choose is not relevant i.e. Adam, Bart and Cathy constitute the same group as Cathy, Adam and Bart. Hence our first guess is too big because we counted the same group more then once. How many times exactly? Well, how many options are there for placing three people in a row? We already know that — it's &lt;span class="math"&gt;\(3!=6\)&lt;/span&gt;. So in our candidate answer we have six exemplars for every group type. So the only thing we have to do now is shrinking all this exemplars to one representative which means we need to divide by 6. That gives us the final answer: &lt;span class="math"&gt;\(\frac{5*4*3}{3!}=\frac{60}{6}=10\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The number of possible choices when choosing &lt;span class="math"&gt;\(k\)&lt;/span&gt; out of &lt;span class="math"&gt;\(n\)&lt;/span&gt; objects (disregarding order) is denoted by something called &lt;a href="https://en.wikipedia.org/wiki/Binomial_coefficient"&gt;&lt;em&gt;binomial coefficient&lt;/em&gt;&lt;/a&gt;: &lt;span class="math"&gt;\({n\choose k}=\frac{n!}{k!(n-k)!}\)&lt;/span&gt;.&lt;sup id="sf-howto-sdw-3-back"&gt;&lt;a title="In Poland it's often referred to as &amp;quot;Newton's symbol&amp;quot;. The combinatorial interpretation, as you may read in the Wikipedia article, is only one of many." class="simple-footnote" href="#sf-howto-sdw-3"&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;/p&gt;
&lt;p&gt;This formula looks a little different from our method but in fact they are equivalent. We just did the division &lt;span class="math"&gt;\(\frac{n!}{(n-k)!}=\frac{5*4*3*2*1}{2*1}\)&lt;/span&gt; implicitly, hence our nominator was equal to &lt;span class="math"&gt;\(5*4*3\)&lt;/span&gt;.&lt;/p&gt;
&lt;h6&gt;&lt;strong&gt;...AND NOW WE'RE BACK&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;First things first: we need some empirical data. I had a couple of vague ideas what a formula might look like, but it would be nice to know the actual answers for some &lt;span class="math"&gt;\(n\)&lt;/span&gt;s, &lt;span class="math"&gt;\(x\)&lt;/span&gt;s and &lt;span class="math"&gt;\(y\)&lt;/span&gt;s in order to have a method for checking if we're on the right track or, in the worst case scenario where we don't find a formula, just get the answer brute-forcefully.&lt;/p&gt;
&lt;p&gt;Not so soon after that an uglier version of this code was up &amp;amp; running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter_heads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# This function flattens a tuple of tuples into list of gotten heads&lt;/span&gt;
    &lt;span class="c1"&gt;# filter_heads(((1,4,2,3), (3,1,2,4)), 2) =&amp;gt; [1,4,3,1]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;brute_prob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# all possible permutations of our initial set&lt;/span&gt;
    &lt;span class="n"&gt;permuts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="c1"&gt;# list of every possible outcome of our experiment. Shrinked to y-long heads.&lt;/span&gt;
    &lt;span class="n"&gt;space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;filter_heads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prdct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;prdct&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permuts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="c1"&gt;# the number of outcomes in which we got all elements of our initial set&lt;/span&gt;
    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;outcome&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outcome&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What is being done here is nothing more than a brutal generation of our problem's probability space. With &lt;code&gt;permuts&lt;/code&gt; we generate all possible shuffles (there are &lt;span class="math"&gt;\(n!\)&lt;/span&gt; of those), then with &lt;code&gt;space&lt;/code&gt; we generate every possible combination of &lt;span class="math"&gt;\(x\)&lt;/span&gt; shuffles (&lt;span class="math"&gt;\(n!^x\)&lt;/span&gt;). In &lt;code&gt;good&lt;/code&gt; we count the number of times when we got all elements of &lt;span class="math"&gt;\(n\)&lt;/span&gt; and finally we return the appropriate probability in a good ol' &lt;a href="https://en.wikipedia.org/wiki/Frequentist_probability"&gt;frequentist&lt;/a&gt; way. &lt;!--- One more remark: we actually don't pass an integer under the &lt;code&gt;n&lt;/code&gt; argument here but a string of &lt;span class="math"&gt;\(n\)&lt;/span&gt; different letters. It's just an implementation decision due to inner workings of &lt;code&gt;itertools&lt;/code&gt; package. --&gt;&lt;/p&gt;
&lt;p&gt;Ok! So now we can just run &lt;code&gt;brute_prob(30,14,6)&lt;/code&gt;, get our answer and be done with all this, right?&lt;/p&gt;
&lt;p&gt;Not so fast.&lt;/p&gt;
&lt;p&gt;This is actually where one can easily see the shortcomings of brute force generation. For example for &lt;span class="math"&gt;\(n=30\)&lt;/span&gt; and &lt;span class="math"&gt;\(x=4\)&lt;/span&gt; the list under &lt;code&gt;space&lt;/code&gt; variable would need to store &lt;span class="math"&gt;\(30!^{4} = 4.9504 * 10^{129}\)&lt;/span&gt; elements which is &lt;em&gt;a little&lt;/em&gt; more then the estimated number of hydrogen atoms in our universe.&lt;sup id="sf-howto-sdw-4-back"&gt;&lt;a title="It is \(10^{82}\) by the way." class="simple-footnote" href="#sf-howto-sdw-4"&gt;4&lt;/a&gt;&lt;/sup&gt; Factorial is a cheeky little beast that grows very big very fast. You don't want your program to execute this kind of computations. Believe me, I learned it the hard way.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;n&lt;/th&gt;
&lt;th align="center"&gt;x&lt;/th&gt;
&lt;th align="center"&gt;y&lt;/th&gt;
&lt;th align="center"&gt;probability&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;53%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;75%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;18%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;30%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;69%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;80%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;96%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- a list o --&gt;

&lt;p&gt;So I didn't have much of a choice but to run tests for smaller arguments. How much smaller? Let's take &lt;span class="math"&gt;\(n=5\)&lt;/span&gt; and &lt;span class="math"&gt;\(x=4\)&lt;/span&gt;. These are nice small numbers, right? Alas, the trickery doesn't stop here. According to &lt;code&gt;sys.getsizeof()&lt;/code&gt; a list of 4 integers takes 96 bytes of space in memory, so for representing all combinations we would need a spare &lt;span class="math"&gt;\(\frac{(5!)^4*96}{1073741824}=18.54\)&lt;/span&gt;GB in our RAM. I don't know about you but I have 8GB total on my faithful mid-2009 MacBook Pro, so I had to say &lt;em&gt;sayonara&lt;/em&gt; to testing for &lt;span class="math"&gt;\(x&amp;gt;3\)&lt;/span&gt;. On the right though you can see some example results I was able to squeeze out.&lt;/p&gt;
&lt;p&gt;So there I was, looking at my freshly printed probabilities (not too many, but they will have to do), ready to find out what the correct formula is.&lt;/p&gt;
&lt;p&gt;Except... I didn't. Long story short — after hours of wrestling with this problem I got closer but in no way close enough. To be completely honest: I wasn't even that surprised since this combinatorics business had never been my strong point.&lt;/p&gt;
&lt;p&gt;So... What now? Is this all there is?&lt;!--- Are we fucked? --&gt;&lt;/p&gt;
&lt;p&gt;Well... This post is also about how sometimes you don't need to have all the answers if you are willing to ask for help and know where you can find it.  &lt;/p&gt;
&lt;h4&gt;THE SOLUTION&lt;br&gt;&lt;span style="font-weight: normal;"&gt;&lt;em&gt;aka&lt;/em&gt;&lt;/span&gt;&lt;br&gt;WHAT I SHOULD'VE BEEN DOING&lt;/h4&gt;
&lt;p&gt;God bless &lt;a href="http://stackexchange.com/"&gt;StackExchange&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Tuesday I posted my question on &lt;a href="https://mathoverflow.net/"&gt;mathoverflow&lt;/a&gt;. Since this site is dedicated to professional mathematicians I was a bit worried that my problem would be considered as spam there. But, as it turned out there is also &lt;a href="http://math.stackexchange.com/"&gt;a place for the profaners&lt;/a&gt; where my question has been migrated thanks to caring and helpful admins.&lt;/p&gt;
&lt;p&gt;Couple of hours later I had my answer (thanks again Kevin Long, whoever you are). &lt;/p&gt;
&lt;p&gt;&lt;audio id="drum"&gt;
&lt;source type="audio/wav" src="images/drum.wav"&gt;
&lt;/audio&gt;
&lt;/p&gt;&lt;p id="hov" style="text-align: center; margin: 20px 0px; line-height: 3rem;"&gt;Are you ready?&lt;br&gt;The formula we were looking for is...&lt;br&gt;&lt;a id="drumroll" href="#drumroll"&gt;drumroll, please&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;div class="math"&gt;$$f(n,x,y)=1-\sum_{i=1}^{n-y} (-1)^{i-1}{n\choose i}\bigg(\frac{{n-i \choose y}y!(n-y)!}{n!}\bigg)^x$$&lt;/div&gt;
&lt;p&gt;Whoa! This beauty is as magnificent as it is scary. But bear with me, we're gonna go through it step by step.&lt;/p&gt;
&lt;p&gt;As it turns out, &lt;strong&gt;the proper way to approach this problem was to do it backwards i.e. to count the scenarios where we &lt;em&gt;didn't&lt;/em&gt; get all elements of the initial set.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First of all — what the hell is this: &lt;span class="math"&gt;\(\sum_{i=1}^{n}\)&lt;/span&gt;? &lt;/p&gt;
&lt;p&gt;To put it in rhyme: it's a sigma notation for a &lt;a href="https://en.wikipedia.org/wiki/Summation"&gt;summation&lt;/a&gt; operation. &lt;/p&gt;
&lt;p&gt;It's meaning is very simple: starting from &lt;span class="math"&gt;\(i=1\)&lt;/span&gt; calculate the value of an expression on the right, then increment &lt;span class="math"&gt;\(i\)&lt;/span&gt; by 1, calculate the value for this &lt;span class="math"&gt;\(i\)&lt;/span&gt; and add it to the previous one, and so on until you calculate the expression for &lt;span class="math"&gt;\(i=n\)&lt;/span&gt;. Basically it's a shortcut for writing long additions.&lt;/p&gt;
&lt;p&gt;Why are we subtracting this sum from &lt;span class="math"&gt;\(1\)&lt;/span&gt;? That's because of the backward approach. When we'll find out the probability of not getting every element of our initial set, we'll have to subtract it from one in order to get the probability of getting every element of the initial set since these two events are &lt;a href="https://en.wikipedia.org/wiki/Mutual_exclusivity#Probability"&gt;mutually exclusive&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's work on example in order to grasp what's going on here. Take &lt;span class="math"&gt;\(n=4\)&lt;/span&gt;, &lt;span class="math"&gt;\(x=3\)&lt;/span&gt; and &lt;span class="math"&gt;\(y=2\)&lt;/span&gt;. We have a playlist of four songs: &lt;span class="math"&gt;\(a, b, c, d\)&lt;/span&gt;, we are playing it three times on shuffle, each time listening to the first two songs.&lt;/p&gt;
&lt;p&gt;We want to count the probability of not getting 1, 2, 3, 4 elements. First remark: it's impossible not to get at least two elements since &lt;span class="math"&gt;\(y=2\)&lt;/span&gt;. In the worst case scenario each time we play a playlist the first two songs will be the same, but then we still got two out of four songs.&lt;/p&gt;
&lt;p&gt;Let's start with not getting one element, &lt;span class="math"&gt;\(a\)&lt;/span&gt; for example. Every time then a "head" of our playlist must be made out of three &lt;span class="math"&gt;\((n-1)\)&lt;/span&gt; elements: &lt;span class="math"&gt;\(b\)&lt;/span&gt;, &lt;span class="math"&gt;\(c\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt;. The head is &lt;span class="math"&gt;\(y=2\)&lt;/span&gt; songs long. How many possible heads are there? We know how to choose two out of three elements: &lt;span class="math"&gt;\({3\choose 2}\)&lt;/span&gt;, but that doesn't take into account the order of the elements which in this case is important since &lt;span class="math"&gt;\(bcda\)&lt;/span&gt; is a different shuffle then &lt;span class="math"&gt;\(cbda\)&lt;/span&gt;. In how many ways can we arrange two elements? It's &lt;span class="math"&gt;\(2!\)&lt;/span&gt;. So the number of possible heads where there is no &lt;span class="math"&gt;\(a\)&lt;/span&gt; equals to &lt;span class="math"&gt;\({3\choose 2}*2!=6\)&lt;/span&gt;, namely &lt;span class="math"&gt;\(\{bc, cb, cd, dc, bd, db\}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We can't forget about the tail though. As above, the playlists &lt;span class="math"&gt;\(bcda\)&lt;/span&gt; and &lt;span class="math"&gt;\(bcad\)&lt;/span&gt; are different. How many elements are in the tail? In our case two, &lt;span class="math"&gt;\(n-y\)&lt;/span&gt; in general. So for every 6 heads we have &lt;span class="math"&gt;\(2!\)&lt;/span&gt; options to arrange the remaining two songs in the tail. &lt;/p&gt;
&lt;p&gt;Once we got the number of &lt;span class="math"&gt;\(a\)&lt;/span&gt;less playlists we have to divide it by the total number of all shuffled playlists (&lt;span class="math"&gt;\(n!\)&lt;/span&gt;) to get the probability of an event that in one shuffling you will get a result without song &lt;span class="math"&gt;\(a\)&lt;/span&gt; in the head. This equals to &lt;span class="math"&gt;\(\frac{{3\choose 2}*2!*2!}{4!}=\frac{12}{24}=\frac{1}{2}\)&lt;/span&gt;. In order to never listen to &lt;span class="math"&gt;\(a\)&lt;/span&gt;, this event must happen each time we play the playlist (i.e. &lt;span class="math"&gt;\(x\)&lt;/span&gt; times). So in this case the chances for this are &lt;span class="math"&gt;\((\frac{1}{2})^3=\frac{1}{8}=0.125\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Do you see what I'm getting at?&lt;/p&gt;
&lt;div class="math"&gt;$$f(n,x,y)=1-\sum_{i=1}^{n-y} (-1)^{i-1}{n\choose i}\underbrace{\bigg(\frac{{n-i \choose y}y!(n-y)!}{n!}\bigg)^x}_\text{booyah!}$$&lt;/div&gt;
&lt;p&gt;Yep. This last bit is a probability of not getting &lt;span class="math"&gt;\(i\)&lt;/span&gt; elements. But let's go back to our case study in order to grasp this &lt;span class="math"&gt;\({n \choose i}\)&lt;/span&gt; part.&lt;/p&gt;
&lt;p&gt;We did our reasoning for &lt;span class="math"&gt;\(a\)&lt;/span&gt; but it is the same for other elements. So the probability of missing any one of the elements will be four times the probability of missing &lt;span class="math"&gt;\(a\)&lt;/span&gt;, since there are four elements. In general though the number of choosing &lt;span class="math"&gt;\(i\)&lt;/span&gt; out of &lt;span class="math"&gt;\(n\)&lt;/span&gt; elements is, you guessed it, &lt;span class="math"&gt;\({n \choose i}\)&lt;/span&gt;. And we want to multiply this number by the probability of missing &lt;span class="math"&gt;\(i\)&lt;/span&gt; elements to take into account all possible ways of missing one, two, three, &lt;span class="math"&gt;\(i\)&lt;/span&gt;... elements. So when we want to count the possible ways of missing two elements, there are &lt;span class="math"&gt;\({4\choose 2}=6\)&lt;/span&gt; possible pairs to exclude, and for every one of them proability of exclusion equals to &lt;span class="math"&gt;\((\frac{{4-2 \choose 2}2!(4-2)!}{4!})^3=\frac{1}{216}\)&lt;/span&gt;, so the total probability of missing two elements is &lt;span class="math"&gt;\(\frac{1}{36}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;What do we do now? We add the probability of leaving out one element and the probability of leaving out two elements and get the total probability of leaving out one or two elements, right?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Wait a moment. If everything is so smooth, what is this weird &lt;span class="math"&gt;\((-1)^{i-1}\)&lt;/span&gt; part for&lt;/em&gt; you ask?&lt;/p&gt;
&lt;p&gt;Good thinking. Not everything is so smooth. We double counted. &lt;a href="https://en.wikipedia.org/wiki/Double_counting_(fallacy)"&gt;Double counting&lt;/a&gt; is probably the least sexy idea in probability and, as it often is with not sexy things, it's &lt;em&gt;molto importante&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Consider a shuffle &lt;span class="math"&gt;\(abcd\)&lt;/span&gt;. In our case this combination misses &lt;span class="math"&gt;\(c\)&lt;/span&gt; but it also misses &lt;span class="math"&gt;\(d\)&lt;/span&gt;. We counted this particular shuffle twice — when we were counting the scenarios for missing &lt;span class="math"&gt;\(c\)&lt;/span&gt; and for missing &lt;span class="math"&gt;\(d\)&lt;/span&gt;. What's more this shuffle was also included in counting the scenarios when two elements — &lt;span class="math"&gt;\(b\)&lt;/span&gt; &lt;em&gt;and&lt;/em&gt; &lt;span class="math"&gt;\(c\)&lt;/span&gt; — are missing. Hence if we were to add the probabilities for &lt;span class="math"&gt;\(i=1\)&lt;/span&gt; and &lt;span class="math"&gt;\(i=2\)&lt;/span&gt; we would be overestimating, counting the same observation three times instead of one.&lt;/p&gt;
&lt;p&gt;Think about the nominator when we estimated the probability of missing &lt;span class="math"&gt;\(a\)&lt;/span&gt;. There were &lt;span class="math"&gt;\(12\)&lt;/span&gt; possible shuffles wherein we missed it. We already know that the total amount of ways in which our playlist can be shuffled is &lt;span class="math"&gt;\(n!\)&lt;/span&gt;, or 24 in our case with &lt;span class="math"&gt;\(n=4\)&lt;/span&gt;. When we multiplied it by four because of the fact that we could make the same reasoning for each of the elements, the total sum of counted scenarios added to &lt;span class="math"&gt;\(4*12=48\)&lt;/span&gt;. Twice as much as the number of all possible shuffles! That's not good. And that happens because the events of, for example, missing &lt;span class="math"&gt;\(a\)&lt;/span&gt; and missing &lt;span class="math"&gt;\(b\)&lt;/span&gt; are &lt;em&gt;not&lt;/em&gt; mutually exclusive.&lt;/p&gt;
&lt;p&gt;Here comes the &lt;a href="https://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle"&gt;inclusion-exclusion principle&lt;/a&gt;. It's a brilliant method to deal with exactly the problem we are facing here. When you try to asses the size of the sum of two sets, what you have to do is to add the sizes of both sets together and then subtract the intersection of these sets. If they do not have common elements the you will be subtracting an empty set and if they do you will subtract exactly those elements which were counted twice.&lt;/p&gt;
&lt;p&gt;From this rationale stems the principle which is further generalised. The algorithm it produces for proper counting takes into account the oddness of the number of sets taking part in the intersection which we are counting. For us it means that we should be adding the probability of missing &lt;span class="math"&gt;\(i\)&lt;/span&gt; elements when &lt;span class="math"&gt;\(i\)&lt;/span&gt; is odd, and subtract it when &lt;span class="math"&gt;\(i\)&lt;/span&gt; is even.&lt;/p&gt;
&lt;p&gt;In our example we are doing only two first steps of this algorithm since we can only miss one or two elements. This limit of elements we can miss is given by &lt;span class="math"&gt;\(n-y\)&lt;/span&gt;. If we'd chosen bigger &lt;span class="math"&gt;\(n\)&lt;/span&gt; like five, we would be subtracting too much in the second iteration because ways of missing two elements would include ways of missing three elements. Hence we would need to compensate for that by again adding the probability of missing three elements. If you feel like not everything is clear here and want more details on the inclusion-exclusion principle I recommend diving in the Wikipedia article linked above.&lt;/p&gt;
&lt;p&gt;Look at this weird bit again: &lt;span class="math"&gt;\((-1)^{i-1}\)&lt;/span&gt; and consider a few possible &lt;span class="math"&gt;\(i\)&lt;/span&gt;s. When &lt;span class="math"&gt;\(i\)&lt;/span&gt; is odd we will be raising &lt;span class="math"&gt;\(-1\)&lt;/span&gt; to the even power, which will yield &lt;span class="math"&gt;\(1\)&lt;/span&gt;, which will change nothing in the calculated probability. When &lt;span class="math"&gt;\(i\)&lt;/span&gt; is even the power would be odd, hence yielding &lt;span class="math"&gt;\(-1\)&lt;/span&gt;. This will result in subtracting the calculated probability. &lt;/p&gt;
&lt;p&gt;That's all that happens here.
&lt;/p&gt;&lt;div id="matbrace"&gt;&lt;p&gt;&lt;/p&gt;
&lt;div class="math"&gt;$$f(n,x,y)=1-\underbrace{\sum_{i=1}^{n-y}}_{\text{1}} \overbrace{(-1)^{i-1}}^{\text{2}}\underbrace{{n\choose i}}_{\text{3}}\overbrace{\bigg(\frac{{n-i \choose y}y!(n-y)!}{n!}\bigg)^x}^{\text{4}}$$&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;i&lt;/em&gt; is the number of elements we want to miss, up to &lt;em&gt;n-y&lt;/em&gt;, because we cannot miss more.&lt;/li&gt;
&lt;li&gt;deciding if we're gonna add or subtract according to inclusion-exclusion principle&lt;/li&gt;
&lt;li&gt;number of ways in which we can miss &lt;em&gt;i&lt;/em&gt; elements&lt;/li&gt;
&lt;li&gt;probability of missing &lt;em&gt;i&lt;/em&gt; elements
&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;I hope that at this point the formula is no longer scary but rather quite comprehensible. You can read the original answer I received &lt;a href="http://math.stackexchange.com/questions/1974420/probability-of-getting-all-elements-of-s-in-x-y-long-subsets-of-samples-drawn-fr/"&gt;here&lt;/a&gt;.&lt;sup id="sf-howto-sdw-5-back"&gt;&lt;a title="If you read carefully you could've noticed that I present myself as a computer science student. Well... We did have a fling with CS this autumn, but it turned out we wanted different things." class="simple-footnote" href="#sf-howto-sdw-5"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p style="text-align: center; font-size: large; margin: 20px 0px;"&gt;&lt;em&gt;Phew!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can now begin the &lt;em&gt;aka&lt;/em&gt; part.&lt;/p&gt;
&lt;p&gt;Remember our initial conceptualisation? Based on a scenario when someone is listening to discover weekly twice a day during a commute which takes 30 minutes (~6 songs), counting weekends as well, we want to know the value of &lt;span class="math"&gt;\(f(30, 14, 6)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In order to do this we need to implement the formula:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# since we don't want to depend too much on imports &lt;/span&gt;
&lt;span class="c1"&gt;# we gonna have to implement couple of things ourselves.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="c1"&gt;# simple factorial function, tail recoursionly&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="c1"&gt;# binomial coefficient &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;discover_weekly_prob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="c1"&gt;# our main function!&lt;/span&gt;
    &lt;span class="n"&gt;sigma_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;newton&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="err"&gt;—&lt;/span&gt; &lt;span class="n"&gt;sigma_sum&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's rather straightforward.&lt;/p&gt;
&lt;p&gt;Now we can finally check what are the chances in our initial scenario.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;discover_weekly_prob(30,14,6)&lt;/code&gt; returns a very modest 23%. So if we are rounding up, we can say that listening in a lazy way gives you one in four chance not to miss any song. So you'll be on the spot once a month.&lt;/p&gt;
&lt;p&gt;That's not very good. If my chances were based on flipping a coin I would be better off.&lt;/p&gt;
&lt;p&gt;What can be done to improve this situation? First you need to decide what's harder to change: the length of a window i.e. the number of songs listened to on one go (&lt;em&gt;y&lt;/em&gt;), or the number of tries (&lt;em&gt;x&lt;/em&gt;)?&lt;/p&gt;
&lt;p&gt;If we are sticking to listening during the commute, we can pinpoint &lt;em&gt;y&lt;/em&gt;=6 and ask how many times would you then have to commute to better your chances. The appropriate graph follows:&lt;/p&gt;
&lt;!--- &lt;img alt="f(30,14,y)" src="images/spotY.png"&gt; --&gt;

&lt;p&gt;&lt;img src="images/spotY.png" alt="f(30,x,6)"&gt;&lt;/p&gt;
&lt;p&gt;You can see that in order to have better chance than a coin toss &lt;em&gt;x&lt;/em&gt; must at least equal to eighteen (57% chance). This means three half-an-hour commutes a day and a stay-at-home Sunday. The 90% threshold is beaten by &lt;em&gt;x&lt;/em&gt;=26. But that means 13 hours of listening time in total, compared to approximate 2.5 hour if we aren't being lazy at all.&lt;/p&gt;
&lt;p&gt;Maybe pinpointing the &lt;span class="math"&gt;\(x\)&lt;/span&gt; variable, hence committing to listening twice a day, will yield better results?&lt;/p&gt;
&lt;p&gt;&lt;img src="images/spotX.png" alt="f(30,14,y)"&gt;&lt;/p&gt;
&lt;p&gt;We get ahead of a coin toss with &lt;em&gt;y&lt;/em&gt; = 8 (67%). If your commutes are longer (40 minutes) you're already quite good to go. Another ten minutes longer and we are right on the 90% probability (&lt;em&gt;y&lt;/em&gt; = 10). The total amount of time spent: 11 hours and 40 minutes. So it looks a bit better then before.&lt;/p&gt;
&lt;p&gt;If we don't want to pinpoint anything and broaden our search, we can make a scatter plot of our function (the greener the color the better the chances):&lt;/p&gt;
&lt;p&gt;&lt;img src="images/spot_scat_green.png" alt="scatter plot of f(30,x,y)"&gt; &lt;/p&gt;
&lt;p&gt;It beautifully happens to be quite symmetrical.&lt;/p&gt;
&lt;p&gt;What about the observation above that making &lt;span class="math"&gt;\(y\)&lt;/span&gt; bigger is time-wise better then making &lt;span class="math"&gt;\(x\)&lt;/span&gt; bigger?&lt;/p&gt;
&lt;p&gt;We can propose a measure that would try to grasp the efficiency of a listening method, hence making our process of deciding how lazy we want to be somewhat better informed.&lt;/p&gt;
&lt;p&gt;The idea is this: we want to know the ratio of probability to time spent on listening. The proposed measure will be very simple:&lt;/p&gt;
&lt;div class="math"&gt;$$\frac{n * probability}{x * y}$$&lt;/div&gt;
&lt;p&gt;In the denominator we calculate the total number of songs that we are about to listen to. In the nominator we are multiplying the probability by &lt;span class="math"&gt;\(n\)&lt;/span&gt; to nicely scale our measure. For the most efficient (not lazy and 100% accurate) method this will then result in &lt;span class="math"&gt;\(\frac{30*1}{1*30}=1\)&lt;/span&gt;. Additionally we want to filter out the probabilities that are lower then 0.5, so when this is the case we're just gonna shrink it to 0.&lt;/p&gt;
&lt;p&gt;Now we can make another scatter plot — this time the greener the color the better the ratio for &lt;span class="math"&gt;\(f(30,x,y)\)&lt;/span&gt;.&lt;sup id="sf-howto-sdw-6-back"&gt;&lt;a title="Apart from the best ratio (top left corner; x=1, y=30) the actual ratios were multiplied by the factor of 2 for viewing purposes. So the intensity of the color is a good indication of differences between all ratios except the best one, which in reality is far better — it's 1 while the second best is 0.5." class="simple-footnote" href="#sf-howto-sdw-6"&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="images/spot_scat_ratio_gr_scl.png" alt="scatter plot of ratio"&gt;&lt;/p&gt;
&lt;p&gt;The darker squares are situated in the top left corner hence confirming our observation that in order to have a good ratio it is better to listen longer and less frequently then the other way around.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you want to play with the probabilities yourself go &lt;a href="https://gist.github.com/tadeoos/a351d0a9549b7a82e0d01a04042124ae"&gt;here&lt;/a&gt; and follow the instructions in the comment.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;CONCLUSION&lt;/h4&gt;
&lt;p&gt;I find it quite interesting how in this little problem we can observe a hustle between reason and comfort.&lt;/p&gt;
&lt;p&gt;From a reason point of view the non-lazy approach is better in every way. It gives you full confidence in delivery and delivers fast.&lt;/p&gt;
&lt;p&gt;And yet, the lazy ones (yours truly included) are set in their comfortable ways and so they descend into the valley of trade-off. Here, it's each men for himself to decide the level of uncertainty one is willing to swallow and the amount of time one is willing to spend swallowing. &lt;/p&gt;
&lt;p&gt;Have I changed my habits after finding the formula? I don't think so. Although at least two things need to be taken into account considering the simplifications we begun with.&lt;/p&gt;
&lt;p&gt;First, there is the &lt;em&gt;next&lt;/em&gt; button. If you are able to decide fast that things won't work out with some songs, this makes it possible to take bigger &lt;span class="math"&gt;\(y\)&lt;/span&gt; when assessing your habits. Second there is the assumption, mentioned above, that each head is of the same length. My intuition tells me that even one time when you go through let's say half of the songs makes your chances considerably better. I haven't calculated that though so don't trust me. My intuition proved to be misleading in the past. But feel free to use the reasoning I've presented here to calculate the odds for more custom-made scenarios. &lt;/p&gt;
&lt;p&gt;What's more there may be some non-lazy improvements to the lazy way. One thought that comes to mind is removing a song you know you don't like immediately from the Discover Weekly playlist. This makes &lt;span class="math"&gt;\(n\)&lt;/span&gt; smaller, hence makes your chances better. This sounds quite comfortably non lazy to me. &lt;/p&gt;
&lt;p&gt;Or the other way around — some lazy improvements to the non-lazy way. The best I could come up with is having an additional playlist for storing songs that you finished at. This option leaves you inside Spotify application, so it is lazy in the sense that you don't need any extra usage of some notes app or good ol' fashioned piece of paper. You still need some extra finger movement though.&lt;/p&gt;
&lt;p&gt;Is it a kind of price you are willing to pay?&lt;/p&gt;
&lt;p&gt;Since this post was about music after all, I'd like to close with &lt;a href="https://www.youtube.com/watch?v=6L13A80gle8"&gt;a link to a song&lt;/a&gt;, which was recommended to me by Discover Weekly and that I like without quote marks.&lt;/p&gt;
&lt;p&gt;Stay sound &amp;amp; tuned.&lt;/p&gt;
&lt;hr&gt;
&lt;script type="text/javascript"&gt;
var snd = document.getElementById("drum");
var asnd = document.getElementById("drumroll");
asnd.addEventListener("click", function(event){
    event.preventDefault()
});
asnd.onmouseover = function(){snd.play();};
&lt;/script&gt;

&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'none'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('Typewriter' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_Typewriter');" +
                "VARIANT['bold'].fonts.unshift('MathJax_Typewriter-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_Typewriter-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_Typewriter-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_Typewriter');" +
                "VARIANT['bold'].fonts.unshift('MathJax_Typewriter-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_Typewriter-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_Typewriter-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-howto-sdw-1"&gt;I'd guess that on average I find around two new "songs that I like" every week. Two out of thirty doesn't sound good, but it is a lot in the machine learning business. &lt;a class="simple-footnote-back" href="#sf-howto-sdw-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-howto-sdw-2"&gt;Or gal, of course. 
Subconsciousness comes in many flavors. &lt;a class="simple-footnote-back" href="#sf-howto-sdw-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-howto-sdw-3"&gt;In Poland it's often referred to as "Newton's symbol". The combinatorial interpretation, as you may read in the Wikipedia article, is only one of many. &lt;a class="simple-footnote-back" href="#sf-howto-sdw-3-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-howto-sdw-4"&gt;It is &lt;span class="math"&gt;\(10^{82}\)&lt;/span&gt; by the way. &lt;a class="simple-footnote-back" href="#sf-howto-sdw-4-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-howto-sdw-5"&gt;If you read carefully you could've noticed that I present myself as a computer science student. Well... We did have a fling with CS this autumn, but it turned out we wanted different things. &lt;a class="simple-footnote-back" href="#sf-howto-sdw-5-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-howto-sdw-6"&gt;Apart from the best ratio (top left corner; x=1, y=30) the actual ratios were multiplied by the factor of 2 for viewing purposes. So the intensity of the color is a good indication of differences between all ratios except the best one, which in reality is far better — it's 1 while the second best is 0.5. &lt;a class="simple-footnote-back" href="#sf-howto-sdw-6-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="tutorial"></category><category term="spotify"></category><category term="probability"></category></entry></feed>